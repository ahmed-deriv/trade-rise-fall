name: 'Deploy to Vercel Production'
description: 'Deploys the application to Vercel Production environment'

inputs:
  vercel-token:
    description: 'Vercel authentication token'
    required: true
  vercel-org-id:
    description: 'Vercel organization ID'
    required: true
  vercel-project-id:
    description: 'Vercel project ID'
    required: true
  sha:
    description: 'Git commit SHA'
    required: true

outputs:
  deployment-url:
    description: 'The URL of the deployed application'
    value: ${{ steps.deploy.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Pull Vercel Environment Information
      shell: bash
      run: vercel pull --yes --environment=production --token=${{ inputs.vercel-token }}
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}

    - name: Build Project
      shell: bash
      run: |
        # Export all GitHub secrets as environment variables
        for secret in $(env | grep "GITHUB_.*=" | cut -d= -f1); do
          echo "$secret=${!secret}" >> $GITHUB_ENV
        done
        for secret in $(env | grep "INPUT_.*=" | cut -d= -f1); do
          # Convert INPUT_VERCEL_TOKEN to VERCEL_TOKEN etc.
          clean_name=$(echo "$secret" | sed 's/^INPUT_//' | tr '[:upper:]' '[:lower:]')
          echo "$clean_name=${!secret}" >> $GITHUB_ENV
        done
        npm run build
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}

    - name: Deploy to Vercel
      id: deploy
      shell: bash
      run: |
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ inputs.vercel-token }} --yes)
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}
