name: 'Deploy to Vercel Production'
description: 'Deploys the application to Vercel Production environment'

inputs:
  vercel-token:
    description: 'Vercel authentication token'
    required: true
  vercel-org-id:
    description: 'Vercel organization ID'
    required: true
  vercel-project-id:
    description: 'Vercel project ID'
    required: true
  sha:
    description: 'Git commit SHA'
    required: true

outputs:
  deployment-url:
    description: 'The URL of the deployed application'
    value: ${{ steps.deploy.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Pull Vercel Environment Information
      shell: bash
      run: |
        echo "üîÑ Pulling Vercel environment information..."
        vercel pull --yes --environment=production --token=${{ inputs.vercel-token }}
        echo "‚úÖ Successfully pulled Vercel environment information"
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}

    - name: Build Project
      shell: bash
      run: |
        echo "üèóÔ∏è Starting build process..."
        echo "üìù Exporting environment variables..."
        # Export all GitHub secrets as environment variables
        for secret in $(env | grep "GITHUB_.*=" | cut -d= -f1); do
          echo "  - Exporting $secret"
          echo "$secret=${!secret}" >> $GITHUB_ENV
        done
        for secret in $(env | grep "INPUT_.*=" | cut -d= -f1); do
          # Convert INPUT_VERCEL_TOKEN to VERCEL_TOKEN etc.
          clean_name=$(echo "$secret" | sed 's/^INPUT_//' | tr '[:upper:]' '[:lower:]')
          echo "  - Converting and exporting $secret as $clean_name"
          echo "$clean_name=${!secret}" >> $GITHUB_ENV
        done
        
        echo "üöÄ Installing all dependencies..."
        npm ci --include=dev
        
        echo "üöÄ Running build command..."
        npm run build
        
        echo "üì¶ Checking build output..."
        if [ -d "dist" ]; then
          echo "  - dist directory exists"
          echo "  - Contents of dist directory:"
          ls -la dist/
        else
          echo "‚ùå dist directory not found!"
          exit 1
        fi
        
        echo "‚úÖ Build completed successfully"
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}

    - name: Deploy to Vercel
      id: deploy
      shell: bash
      run: |
        echo "üöÄ Starting Vercel deployment..."
        echo "üìÇ Deploying dist directory..."
        echo "  - Current directory contents:"
        ls -la dist/
        
        echo "‚òÅÔ∏è Deploying to Vercel..."
        DEPLOYMENT_URL=$(vercel deploy --cwd dist --prod --token=${{ inputs.vercel-token }} --yes)
        echo "  - Deployment URL: $DEPLOYMENT_URL"
        
        echo "üíæ Saving deployment URL..."
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Deployment completed successfully"
        echo "üåç Production URL: $DEPLOYMENT_URL"
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}
